{
  "swagger": "2.0",
  "info": {
    "description": "This is the Campus Connect App API. It performs CRUD on content, tags, questions and assessments.",
    "version": "1.0.0",
    "title": "Campus Connect"
  },
  "host": "localhost:5000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "user",
      "description": "Register new user"
    },
    {
      "name": "content",
      "description": "CRUD on Content (Content could include preparation tips, aptitude test or interview experiences)"
    },
    {
      "name": "question",
      "description": "CRUD on Questions"
    },
    {
      "name": "assessment",
      "description": "CRUD on assessments (Assessments are collections of questions)"
    },
    {
      "name": "tag",
      "description": "CRUD on tags"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created user",
            "schema": {
              "$ref": "#/definitions/User_out"
            }
          },
          "405": {
            "description": "Validation Exceptions USER_ERROR_001 : Username is required and should be a non-empty string. USER_ERROR_002 : Password is required and should be a non-empty string. USER_ERROR_003 : The provided username already exists. Please choose another one.          USER_ERROR_004 : The provided email already exists. Please choose another one.          USER_ERROR_005 : Please enter a valid email id.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/content": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Add new content",
        "description": "",
        "operationId": "addContent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Card that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Content_in"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Validation Exceptions CONTENT_ERROR_001 : Title is required and should be a non-empty string. CONTENT_ERROR_002 : Content is required and should be a non-empty string. CONTENT_ERROR_003 : Invalid tags provided.          "
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/content/{content_id}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get content by content_id",
        "description": "",
        "operationId": "getContentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "The id that needs to be fetched.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Content_out"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "content"
        ],
        "summary": "Update existing content",
        "description": "",
        "operationId": "updateContent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "The id that needs to be fetched.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Content that needs to be edited",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Content_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated",
            "schema": {
              "$ref": "#/definitions/Content_out"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Content with given ID not found"
          },
          "405": {
            "description": "Validation Exceptions CONTENT_ERROR_001 : Title is required and should be a non-empty string. CONTENT_ERROR_002 : Content is required and should be a non-empty string. CONTENT_ERROR_003 : Invalid tags provided.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Delete content by content_id",
        "description": "",
        "operationId": "deleteContentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "The id that needs to be deleted.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/question": {
      "post": {
        "tags": [
          "question"
        ],
        "summary": "Post Question",
        "description": "",
        "operationId": "createQuestion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Question object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question created",
            "schema": {
              "$ref": "#/definitions/Question_out"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "405": {
            "description": "Validation exceptions QUESTION_ERROR_001 : Question is required and should be a non-empty string. QUESTION_ERROR_002 : Options are required and should be non-empty strings. QUESTION_ERROR_003 : Correct option is required and should be a number 1-4. QUESTION_ERROR_004 : Invalid tags provided.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/question/{question_id}": {
      "get": {
        "tags": [
          "question"
        ],
        "summary": "Get Question",
        "description": "",
        "operationId": "getQuestionById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "The question id that needs to be fetched.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully fectched",
            "schema": {
              "$ref": "#/definitions/Question_out"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "question"
        ],
        "summary": "Update an existing Question",
        "description": "",
        "operationId": "updateQuestion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Question object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question updated",
            "schema": {
              "$ref": "#/definitions/Question_out"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Deck not found"
          },
          "405": {
            "description": "Validation exceptions QUESTION_ERROR_001 : Question is required and should be a non-empty string. QUESTION_ERROR_002 : Options are required and should be non-empty strings. QUESTION_ERROR_003 : Correct option is required and should be a number 1-4. QUESTION_ERROR_004 : Invalid tags provided.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "question"
        ],
        "summary": "Delete question by question_id.",
        "description": "Delete a question",
        "operationId": "deleteQuestionById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "description": "The id that needs to be deleted.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/assessment": {
      "post": {
        "tags": [
          "assessment"
        ],
        "summary": "Post Assessment",
        "description": "",
        "operationId": "createAssessment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Assessment object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assessment_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assessment created",
            "schema": {
              "$ref": "#/definitions/Assessment_out"
            }
          },
          "405": {
            "description": "Validation exceptions ASSESSMENT_ERROR_001 : Assessment name is required and should be a non-empty string. ASSESSMENT_ERROR_002 : Invalid question ids provided ASSESSMENT_ERROR_003 : Invalid tags provided.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/assessment/{assessment_id}": {
      "get": {
        "tags": [
          "assessment"
        ],
        "summary": "Get Assessment",
        "description": "",
        "operationId": "getAssessmentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "The assessment id that needs to be fetched.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully fectched",
            "schema": {
              "$ref": "#/definitions/Assessment_out"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "assessment"
        ],
        "summary": "Update an existing Assessment",
        "description": "",
        "operationId": "updateAssessment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Assessment object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assessment_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assessment updated",
            "schema": {
              "$ref": "#/definitions/Question_out"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Assessment not found"
          },
          "405": {
            "description": "Validation exceptions ASSESSMENT_ERROR_001 : Assessment name is required and should be a non-empty string. ASSESSMENT_ERROR_002 : Invalid question ids provided ASSESSMENT_ERROR_003 : Invalid tags provided.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "assessment"
        ],
        "summary": "Delete assessment by assessment_id.",
        "description": "Delete an assessment",
        "operationId": "deleteAssessmentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "description": "The id that needs to be deleted.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/tag": {
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "Post a new Tag",
        "description": "",
        "operationId": "createTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Tag object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assessment created",
            "schema": {
              "$ref": "#/definitions/Tag_out"
            }
          },
          "405": {
            "description": "Validation exceptions TAG_ERROR_001 : Assessment name is required and should be a non-empty string.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/tag/{tag_id}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Get lists of ids of questions,assessments,content associated with a tag id.",
        "description": "",
        "operationId": "getTagById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The tag id that needs to be fetched.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully fectched",
            "schema": {
              "$ref": "#/definitions/Tag_out"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "tag"
        ],
        "summary": "Update an existing Tag",
        "description": "",
        "operationId": "updateTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tag object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag_in"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag updated",
            "schema": {
              "$ref": "#/definitions/Tag_out"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tag not found"
          },
          "405": {
            "description": "Validation exceptions TAG_ERROR_001 : Tag name is required and should be a non-empty string.          "
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "Delete tag by tag_id.",
        "description": "Delete tag",
        "operationId": "deleteTagById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "The id that needs to be deleted.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted"
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authentication-Token",
      "in": "header"
    }
  },
  "definitions": {
    "Content_in": {
      "type": "object",
      "required": [
        "title",
        "content",
        "tags",
        "is_anon"
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "is_anon": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Content_in"
      }
    },
    "Content_out": {
      "type": "object",
      "required": [
        "title",
        "content",
        "tags",
        "is_anon"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "is_anon": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Content_out"
      }
    },
    "Question_in": {
      "type": "object",
      "required": [
        "question",
        "option1",
        "option2",
        "option3",
        "option4",
        "correct_option",
        "tags"
      ],
      "properties": {
        "question": {
          "type": "string"
        },
        "option1": {
          "type": "string"
        },
        "option2": {
          "type": "string"
        },
        "option3": {
          "type": "string"
        },
        "option4": {
          "type": "string"
        },
        "correct_option": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4,
          "format": "int32"
        },
        "tags": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Question_in"
      }
    },
    "Question_out": {
      "type": "object",
      "required": [
        "question_id",
        "question",
        "option1",
        "option2",
        "option3",
        "option4",
        "correct_option",
        "author",
        "tags",
        "created_at"
      ],
      "properties": {
        "question_id": {
          "type": "integer",
          "format": "int32"
        },
        "question": {
          "type": "string"
        },
        "option1": {
          "type": "string"
        },
        "option2": {
          "type": "string"
        },
        "option3": {
          "type": "string"
        },
        "option4": {
          "type": "string"
        },
        "correct_option": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4,
          "format": "int32"
        },
        "author": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Question_out"
      }
    },
    "Assessment_in": {
      "type": "object",
      "required": [
        "assessment_name",
        "questions",
        "tags"
      ],
      "properties": {
        "assessment_name": {
          "type": "string"
        },
        "questions": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Assessment_in"
      }
    },
    "Assessment_out": {
      "type": "object",
      "required": [
        "assessment_id",
        "assessment_name",
        "questions",
        "tags"
      ],
      "properties": {
        "assessment_id": {
          "type": "integer",
          "format": "int32"
        },
        "assessment_name": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question_out"
          }
        },
        "tags": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Assessment_out"
      }
    },
    "User_in": {
      "type": "object",
      "required": [
        "username",
        "email",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User_in"
      }
    },
    "User_out": {
      "type": "object",
      "required": [
        "username",
        "email",
        "password"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User_out"
      }
    },
    "Tag_in": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag_in"
      }
    },
    "Tag_out": {
      "type": "object",
      "required": [
        "tag_id",
        "name",
        "questions",
        "contents",
        "assessments"
      ],
      "properties": {
        "tag_id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Id_list"
          }
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Id_list"
          }
        },
        "assessments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Id_list"
          }
        }
      },
      "xml": {
        "name": "Tag_out"
      }
    },
    "Id_list": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "Id_list"
      }
    }
  },
  "externalDocs": {
    "description": "Campus Connect",
    "url": "http://localhost:5000"
  }
}